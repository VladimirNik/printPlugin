package org.squeryl.dsl.boilerplate {
  import org.squeryl.dsl.fsm.{GroupQueryYield, QueryElements, GroupByState};
  import org.squeryl.dsl.TypedExpression;
  abstract trait GroupBySignatures extends scala.AnyRef { self: org.squeryl.dsl.fsm.QueryElements[_] => 
    def /*GroupBySignatures*/$init$(): Unit = {
      ()
    };
    def groupBy[T1 >: Nothing <: Any](e1: => org.squeryl.dsl.TypedExpression[T1, _]): org.squeryl.dsl.fsm.GroupByState[T1] = new org.squeryl.dsl.fsm.GroupQueryYield[T1](this, (() => immutable.this.List.apply[org.squeryl.dsl.TypedExpression[T1,_$2]](e1)));
    def groupBy[T1 >: Nothing <: Any, T2 >: Nothing <: Any](e1: => org.squeryl.dsl.TypedExpression[T1, _], e2: => org.squeryl.dsl.TypedExpression[T2, _]): org.squeryl.dsl.fsm.GroupByState[Product2[T1,T2]] = new org.squeryl.dsl.fsm.GroupQueryYield[Product2[T1,T2]](this, (() => immutable.this.List.apply[org.squeryl.dsl.TypedExpression[_ >: T2 with T1, _ >: _$4 with _$3]](e1, e2)));
    def groupBy[T1 >: Nothing <: Any, T2 >: Nothing <: Any, T3 >: Nothing <: Any](e1: => org.squeryl.dsl.TypedExpression[T1, _], e2: => org.squeryl.dsl.TypedExpression[T2, _], e3: => org.squeryl.dsl.TypedExpression[T3, _]): org.squeryl.dsl.fsm.GroupByState[Product3[T1,T2,T3]] = new org.squeryl.dsl.fsm.GroupQueryYield[Product3[T1,T2,T3]](this, (() => immutable.this.List.apply[org.squeryl.dsl.TypedExpression[_ >: T3 with T2 with T1, _ >: _$7 with _$6 with _$5]](e1, e2, e3)));
    def groupBy[T1 >: Nothing <: Any, T2 >: Nothing <: Any, T3 >: Nothing <: Any, T4 >: Nothing <: Any](e1: => org.squeryl.dsl.TypedExpression[T1, _], e2: => org.squeryl.dsl.TypedExpression[T2, _], e3: => org.squeryl.dsl.TypedExpression[T3, _], e4: => org.squeryl.dsl.TypedExpression[T4, _]): org.squeryl.dsl.fsm.GroupByState[Product4[T1,T2,T3,T4]] = new org.squeryl.dsl.fsm.GroupQueryYield[Product4[T1,T2,T3,T4]](this, (() => immutable.this.List.apply[org.squeryl.dsl.TypedExpression[_ >: T4 with T3 with T2 with T1, _ >: _$11 with _$10 with _$9 with _$8]](e1, e2, e3, e4)));
    def groupBy[T1 >: Nothing <: Any, T2 >: Nothing <: Any, T3 >: Nothing <: Any, T4 >: Nothing <: Any, T5 >: Nothing <: Any](e1: => org.squeryl.dsl.TypedExpression[T1, _], e2: => org.squeryl.dsl.TypedExpression[T2, _], e3: => org.squeryl.dsl.TypedExpression[T3, _], e4: => org.squeryl.dsl.TypedExpression[T4, _], e5: => org.squeryl.dsl.TypedExpression[T5, _]): org.squeryl.dsl.fsm.GroupByState[Product5[T1,T2,T3,T4,T5]] = new org.squeryl.dsl.fsm.GroupQueryYield[Product5[T1,T2,T3,T4,T5]](this, (() => immutable.this.List.apply[org.squeryl.dsl.TypedExpression[_ >: T5 with T4 with T3 with T2 with T1, _ >: _$16 with _$15 with _$14 with _$13 with _$12]](e1, e2, e3, e4, e5)));
    def groupBy[T1 >: Nothing <: Any, T2 >: Nothing <: Any, T3 >: Nothing <: Any, T4 >: Nothing <: Any, T5 >: Nothing <: Any, T6 >: Nothing <: Any](e1: => org.squeryl.dsl.TypedExpression[T1, _], e2: => org.squeryl.dsl.TypedExpression[T2, _], e3: => org.squeryl.dsl.TypedExpression[T3, _], e4: => org.squeryl.dsl.TypedExpression[T4, _], e5: => org.squeryl.dsl.TypedExpression[T5, _], e6: => org.squeryl.dsl.TypedExpression[T6, _]): org.squeryl.dsl.fsm.GroupByState[Product6[T1,T2,T3,T4,T5,T6]] = new org.squeryl.dsl.fsm.GroupQueryYield[Product6[T1,T2,T3,T4,T5,T6]](this, (() => immutable.this.List.apply[org.squeryl.dsl.TypedExpression[_ >: T6 with T5 with T4 with T3 with T2 with T1, _ >: _$22 with _$21 with _$20 with _$19 with _$18 with _$17]](e1, e2, e3, e4, e5, e6)));
    def groupBy[T1 >: Nothing <: Any, T2 >: Nothing <: Any, T3 >: Nothing <: Any, T4 >: Nothing <: Any, T5 >: Nothing <: Any, T6 >: Nothing <: Any, T7 >: Nothing <: Any](e1: => org.squeryl.dsl.TypedExpression[T1, _], e2: => org.squeryl.dsl.TypedExpression[T2, _], e3: => org.squeryl.dsl.TypedExpression[T3, _], e4: => org.squeryl.dsl.TypedExpression[T4, _], e5: => org.squeryl.dsl.TypedExpression[T5, _], e6: => org.squeryl.dsl.TypedExpression[T6, _], e7: => org.squeryl.dsl.TypedExpression[T7, _]): org.squeryl.dsl.fsm.GroupByState[Product7[T1,T2,T3,T4,T5,T6,T7]] = new org.squeryl.dsl.fsm.GroupQueryYield[Product7[T1,T2,T3,T4,T5,T6,T7]](this, (() => immutable.this.List.apply[org.squeryl.dsl.TypedExpression[_ >: T7 with T6 with T5 with T4 with T3 with T2 with T1, _ >: _$29 with _$28 with _$27 with _$26 with _$25 with _$24 with _$23]](e1, e2, e3, e4, e5, e6, e7)));
    def groupBy[T1 >: Nothing <: Any, T2 >: Nothing <: Any, T3 >: Nothing <: Any, T4 >: Nothing <: Any, T5 >: Nothing <: Any, T6 >: Nothing <: Any, T7 >: Nothing <: Any, T8 >: Nothing <: Any](e1: => org.squeryl.dsl.TypedExpression[T1, _], e2: => org.squeryl.dsl.TypedExpression[T2, _], e3: => org.squeryl.dsl.TypedExpression[T3, _], e4: => org.squeryl.dsl.TypedExpression[T4, _], e5: => org.squeryl.dsl.TypedExpression[T5, _], e6: => org.squeryl.dsl.TypedExpression[T6, _], e7: => org.squeryl.dsl.TypedExpression[T7, _], e8: => org.squeryl.dsl.TypedExpression[T8, _]): org.squeryl.dsl.fsm.GroupByState[Product8[T1,T2,T3,T4,T5,T6,T7,T8]] = new org.squeryl.dsl.fsm.GroupQueryYield[Product8[T1,T2,T3,T4,T5,T6,T7,T8]](this, (() => immutable.this.List.apply[org.squeryl.dsl.TypedExpression[_ >: T8 with T7 with T6 with T5 with T4 with T3 with T2 with T1, _ >: _$37 with _$36 with _$35 with _$34 with _$33 with _$32 with _$31 with _$30]](e1, e2, e3, e4, e5, e6, e7, e8)))
  }
}