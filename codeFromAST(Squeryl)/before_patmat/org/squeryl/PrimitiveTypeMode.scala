package org.squeryl {
  import dsl.ast._;
  import dsl._;
  import internals.FieldReferenceLinker;
  import java.util.{Date, UUID};
  import java.sql.Timestamp;
  import java.sql.ResultSet;
  import org.squeryl.internals.Utils;
  import org.squeryl.internals.FieldMapper;
  @deprecated("the PrimitiveTypeMode companion object is deprecated, you should define a mix in the trait for your application. See : http://squeryl.org/0.9.6.html", "0.9.6") object PrimitiveTypeMode extends Object with org.squeryl.PrimitiveTypeMode {
    def <init>(): org.squeryl.PrimitiveTypeMode.type = {
      PrimitiveTypeMode.super.<init>();
      ()
    }
  };
  private[squeryl] object InternalFieldMapper extends Object with org.squeryl.PrimitiveTypeMode {
    def <init>(): org.squeryl.InternalFieldMapper.type = {
      InternalFieldMapper.super.<init>();
      ()
    }
  };
  abstract trait PrimitiveTypeMode extends Object with org.squeryl.dsl.QueryDsl with org.squeryl.internals.FieldMapper {
    def /*PrimitiveTypeMode*/$init$(): Unit = {
      ()
    };
    private[this] val stringTEF: org.squeryl.dsl.TypedExpressionFactory[String,org.squeryl.dsl.TString] with org.squeryl.dsl.PrimitiveJdbcMapper[String]{val sample: String; val defaultColumnLength: Int} = PrimitiveTypeMode.this.PrimitiveTypeSupport.stringTEF;
    implicit <stable> <accessor> def stringTEF: org.squeryl.dsl.TypedExpressionFactory[String,org.squeryl.dsl.TString] with org.squeryl.dsl.PrimitiveJdbcMapper[String]{val sample: String; val defaultColumnLength: Int} = PrimitiveTypeMode.this.stringTEF;
    private[this] val optionStringTEF: org.squeryl.dsl.TypedExpressionFactory[Option[String],org.squeryl.dsl.TOptionString] with org.squeryl.dsl.DeOptionizer[String,String,org.squeryl.dsl.TString,Option[String],org.squeryl.dsl.TOptionString]{val deOptionizer: org.squeryl.dsl.TypedExpressionFactory[String,org.squeryl.dsl.TString] with org.squeryl.dsl.PrimitiveJdbcMapper[String]{val sample: String; val defaultColumnLength: Int}} = PrimitiveTypeMode.this.PrimitiveTypeSupport.optionStringTEF;
    implicit <stable> <accessor> def optionStringTEF: org.squeryl.dsl.TypedExpressionFactory[Option[String],org.squeryl.dsl.TOptionString] with org.squeryl.dsl.DeOptionizer[String,String,org.squeryl.dsl.TString,Option[String],org.squeryl.dsl.TOptionString]{val deOptionizer: org.squeryl.dsl.TypedExpressionFactory[String,org.squeryl.dsl.TString] with org.squeryl.dsl.PrimitiveJdbcMapper[String]{val sample: String; val defaultColumnLength: Int}} = PrimitiveTypeMode.this.optionStringTEF;
    private[this] val dateTEF: org.squeryl.dsl.TypedExpressionFactory[java.util.Date,org.squeryl.dsl.TDate] with org.squeryl.dsl.PrimitiveJdbcMapper[java.util.Date]{val sample: java.util.Date; val defaultColumnLength: Int; def extractNativeJdbcValue(rs: java.sql.ResultSet,i: Int): java.sql.Date} = PrimitiveTypeMode.this.PrimitiveTypeSupport.dateTEF;
    implicit <stable> <accessor> def dateTEF: org.squeryl.dsl.TypedExpressionFactory[java.util.Date,org.squeryl.dsl.TDate] with org.squeryl.dsl.PrimitiveJdbcMapper[java.util.Date]{val sample: java.util.Date; val defaultColumnLength: Int; def extractNativeJdbcValue(rs: java.sql.ResultSet,i: Int): java.sql.Date} = PrimitiveTypeMode.this.dateTEF;
    private[this] val optionDateTEF: org.squeryl.dsl.TypedExpressionFactory[Option[java.util.Date],org.squeryl.dsl.TOptionDate] with org.squeryl.dsl.DeOptionizer[java.util.Date,java.util.Date,org.squeryl.dsl.TDate,Option[java.util.Date],org.squeryl.dsl.TOptionDate]{val deOptionizer: org.squeryl.dsl.TypedExpressionFactory[java.util.Date,org.squeryl.dsl.TDate] with org.squeryl.dsl.PrimitiveJdbcMapper[java.util.Date]{val sample: java.util.Date; val defaultColumnLength: Int; def extractNativeJdbcValue(rs: java.sql.ResultSet,i: Int): java.sql.Date}} = PrimitiveTypeMode.this.PrimitiveTypeSupport.optionDateTEF;
    implicit <stable> <accessor> def optionDateTEF: org.squeryl.dsl.TypedExpressionFactory[Option[java.util.Date],org.squeryl.dsl.TOptionDate] with org.squeryl.dsl.DeOptionizer[java.util.Date,java.util.Date,org.squeryl.dsl.TDate,Option[java.util.Date],org.squeryl.dsl.TOptionDate]{val deOptionizer: org.squeryl.dsl.TypedExpressionFactory[java.util.Date,org.squeryl.dsl.TDate] with org.squeryl.dsl.PrimitiveJdbcMapper[java.util.Date]{val sample: java.util.Date; val defaultColumnLength: Int; def extractNativeJdbcValue(rs: java.sql.ResultSet,i: Int): java.sql.Date}} = PrimitiveTypeMode.this.optionDateTEF;
    private[this] val timestampTEF: org.squeryl.dsl.TypedExpressionFactory[java.sql.Timestamp,org.squeryl.dsl.TTimestamp] with org.squeryl.dsl.PrimitiveJdbcMapper[java.sql.Timestamp]{val sample: java.sql.Timestamp; val defaultColumnLength: Int} = PrimitiveTypeMode.this.PrimitiveTypeSupport.timestampTEF;
    implicit <stable> <accessor> def timestampTEF: org.squeryl.dsl.TypedExpressionFactory[java.sql.Timestamp,org.squeryl.dsl.TTimestamp] with org.squeryl.dsl.PrimitiveJdbcMapper[java.sql.Timestamp]{val sample: java.sql.Timestamp; val defaultColumnLength: Int} = PrimitiveTypeMode.this.timestampTEF;
    private[this] val optionTimestampTEF: org.squeryl.dsl.TypedExpressionFactory[Option[java.sql.Timestamp],org.squeryl.dsl.TOptionTimestamp] with org.squeryl.dsl.DeOptionizer[java.sql.Timestamp,java.sql.Timestamp,org.squeryl.dsl.TTimestamp,Option[java.sql.Timestamp],org.squeryl.dsl.TOptionTimestamp]{val deOptionizer: org.squeryl.dsl.TypedExpressionFactory[java.sql.Timestamp,org.squeryl.dsl.TTimestamp] with org.squeryl.dsl.PrimitiveJdbcMapper[java.sql.Timestamp]{val sample: java.sql.Timestamp; val defaultColumnLength: Int}} = PrimitiveTypeMode.this.PrimitiveTypeSupport.optionTimestampTEF;
    implicit <stable> <accessor> def optionTimestampTEF: org.squeryl.dsl.TypedExpressionFactory[Option[java.sql.Timestamp],org.squeryl.dsl.TOptionTimestamp] with org.squeryl.dsl.DeOptionizer[java.sql.Timestamp,java.sql.Timestamp,org.squeryl.dsl.TTimestamp,Option[java.sql.Timestamp],org.squeryl.dsl.TOptionTimestamp]{val deOptionizer: org.squeryl.dsl.TypedExpressionFactory[java.sql.Timestamp,org.squeryl.dsl.TTimestamp] with org.squeryl.dsl.PrimitiveJdbcMapper[java.sql.Timestamp]{val sample: java.sql.Timestamp; val defaultColumnLength: Int}} = PrimitiveTypeMode.this.optionTimestampTEF;
    private[this] val doubleArrayTEF: org.squeryl.internals.ArrayTEF[Double,org.squeryl.dsl.TDoubleArray]{val sample: Array[Double]} = PrimitiveTypeMode.this.PrimitiveTypeSupport.doubleArrayTEF;
    implicit <stable> <accessor> def doubleArrayTEF: org.squeryl.internals.ArrayTEF[Double,org.squeryl.dsl.TDoubleArray]{val sample: Array[Double]} = PrimitiveTypeMode.this.doubleArrayTEF;
    private[this] val intArrayTEF: org.squeryl.internals.ArrayTEF[Int,org.squeryl.dsl.TIntArray]{val sample: Array[Int]} = PrimitiveTypeMode.this.PrimitiveTypeSupport.intArrayTEF;
    implicit <stable> <accessor> def intArrayTEF: org.squeryl.internals.ArrayTEF[Int,org.squeryl.dsl.TIntArray]{val sample: Array[Int]} = PrimitiveTypeMode.this.intArrayTEF;
    private[this] val longArrayTEF: org.squeryl.internals.ArrayTEF[Long,org.squeryl.dsl.TLongArray]{val sample: Array[Long]} = PrimitiveTypeMode.this.PrimitiveTypeSupport.longArrayTEF;
    implicit <stable> <accessor> def longArrayTEF: org.squeryl.internals.ArrayTEF[Long,org.squeryl.dsl.TLongArray]{val sample: Array[Long]} = PrimitiveTypeMode.this.longArrayTEF;
    private[this] val stringArrayTEF: org.squeryl.internals.ArrayTEF[String,org.squeryl.dsl.TStringArray]{val sample: Array[String]} = PrimitiveTypeMode.this.PrimitiveTypeSupport.stringArrayTEF;
    implicit <stable> <accessor> def stringArrayTEF: org.squeryl.internals.ArrayTEF[String,org.squeryl.dsl.TStringArray]{val sample: Array[String]} = PrimitiveTypeMode.this.stringArrayTEF;
    private[this] val byteTEF: org.squeryl.dsl.IntegralTypedExpressionFactory[Byte,org.squeryl.dsl.TByte,Float,org.squeryl.dsl.TFloat] with org.squeryl.dsl.PrimitiveJdbcMapper[Byte]{val sample: Byte; val defaultColumnLength: Int; val floatifyer: org.squeryl.dsl.FloatTypedExpressionFactory[Float,org.squeryl.dsl.TFloat] with org.squeryl.dsl.PrimitiveJdbcMapper[Float]{val sample: Float; val defaultColumnLength: Int}} = PrimitiveTypeMode.this.PrimitiveTypeSupport.byteTEF;
    implicit <stable> <accessor> def byteTEF: org.squeryl.dsl.IntegralTypedExpressionFactory[Byte,org.squeryl.dsl.TByte,Float,org.squeryl.dsl.TFloat] with org.squeryl.dsl.PrimitiveJdbcMapper[Byte]{val sample: Byte; val defaultColumnLength: Int; val floatifyer: org.squeryl.dsl.FloatTypedExpressionFactory[Float,org.squeryl.dsl.TFloat] with org.squeryl.dsl.PrimitiveJdbcMapper[Float]{val sample: Float; val defaultColumnLength: Int}} = PrimitiveTypeMode.this.byteTEF;
    private[this] val optionByteTEF: org.squeryl.dsl.IntegralTypedExpressionFactory[Option[Byte],org.squeryl.dsl.TOptionByte,Option[Float],org.squeryl.dsl.TOptionFloat] with org.squeryl.dsl.DeOptionizer[Byte,Byte,org.squeryl.dsl.TByte,Option[Byte],org.squeryl.dsl.TOptionByte]{val deOptionizer: org.squeryl.dsl.IntegralTypedExpressionFactory[Byte,org.squeryl.dsl.TByte,Float,org.squeryl.dsl.TFloat] with org.squeryl.dsl.PrimitiveJdbcMapper[Byte]{val sample: Byte; val defaultColumnLength: Int; val floatifyer: org.squeryl.dsl.FloatTypedExpressionFactory[Float,org.squeryl.dsl.TFloat] with org.squeryl.dsl.PrimitiveJdbcMapper[Float]{val sample: Float; val defaultColumnLength: Int}}; val floatifyer: org.squeryl.dsl.FloatTypedExpressionFactory[Option[Float],org.squeryl.dsl.TOptionFloat] with org.squeryl.dsl.DeOptionizer[Float,Float,org.squeryl.dsl.TFloat,Option[Float],org.squeryl.dsl.TOptionFloat]{val deOptionizer: org.squeryl.dsl.FloatTypedExpressionFactory[Float,org.squeryl.dsl.TFloat] with org.squeryl.dsl.PrimitiveJdbcMapper[Float]{val sample: Float; val defaultColumnLength: Int}}} = PrimitiveTypeMode.this.PrimitiveTypeSupport.optionByteTEF;
    implicit <stable> <accessor> def optionByteTEF: org.squeryl.dsl.IntegralTypedExpressionFactory[Option[Byte],org.squeryl.dsl.TOptionByte,Option[Float],org.squeryl.dsl.TOptionFloat] with org.squeryl.dsl.DeOptionizer[Byte,Byte,org.squeryl.dsl.TByte,Option[Byte],org.squeryl.dsl.TOptionByte]{val deOptionizer: org.squeryl.dsl.IntegralTypedExpressionFactory[Byte,org.squeryl.dsl.TByte,Float,org.squeryl.dsl.TFloat] with org.squeryl.dsl.PrimitiveJdbcMapper[Byte]{val sample: Byte; val defaultColumnLength: Int; val floatifyer: org.squeryl.dsl.FloatTypedExpressionFactory[Float,org.squeryl.dsl.TFloat] with org.squeryl.dsl.PrimitiveJdbcMapper[Float]{val sample: Float; val defaultColumnLength: Int}}; val floatifyer: org.squeryl.dsl.FloatTypedExpressionFactory[Option[Float],org.squeryl.dsl.TOptionFloat] with org.squeryl.dsl.DeOptionizer[Float,Float,org.squeryl.dsl.TFloat,Option[Float],org.squeryl.dsl.TOptionFloat]{val deOptionizer: org.squeryl.dsl.FloatTypedExpressionFactory[Float,org.squeryl.dsl.TFloat] with org.squeryl.dsl.PrimitiveJdbcMapper[Float]{val sample: Float; val defaultColumnLength: Int}}} = PrimitiveTypeMode.this.optionByteTEF;
    private[this] val intTEF: org.squeryl.dsl.IntegralTypedExpressionFactory[Int,org.squeryl.dsl.TInt,Float,org.squeryl.dsl.TFloat] with org.squeryl.dsl.PrimitiveJdbcMapper[Int]{val sample: Int; val defaultColumnLength: Int; val floatifyer: org.squeryl.dsl.FloatTypedExpressionFactory[Float,org.squeryl.dsl.TFloat] with org.squeryl.dsl.PrimitiveJdbcMapper[Float]{val sample: Float; val defaultColumnLength: Int}} = PrimitiveTypeMode.this.PrimitiveTypeSupport.intTEF;
    implicit <stable> <accessor> def intTEF: org.squeryl.dsl.IntegralTypedExpressionFactory[Int,org.squeryl.dsl.TInt,Float,org.squeryl.dsl.TFloat] with org.squeryl.dsl.PrimitiveJdbcMapper[Int]{val sample: Int; val defaultColumnLength: Int; val floatifyer: org.squeryl.dsl.FloatTypedExpressionFactory[Float,org.squeryl.dsl.TFloat] with org.squeryl.dsl.PrimitiveJdbcMapper[Float]{val sample: Float; val defaultColumnLength: Int}} = PrimitiveTypeMode.this.intTEF;
    private[this] val optionIntTEF: org.squeryl.dsl.IntegralTypedExpressionFactory[Option[Int],org.squeryl.dsl.TOptionInt,Option[Float],org.squeryl.dsl.TOptionFloat] with org.squeryl.dsl.DeOptionizer[Int,Int,org.squeryl.dsl.TInt,Option[Int],org.squeryl.dsl.TOptionInt]{val deOptionizer: org.squeryl.dsl.IntegralTypedExpressionFactory[Int,org.squeryl.dsl.TInt,Float,org.squeryl.dsl.TFloat] with org.squeryl.dsl.PrimitiveJdbcMapper[Int]{val sample: Int; val defaultColumnLength: Int; val floatifyer: org.squeryl.dsl.FloatTypedExpressionFactory[Float,org.squeryl.dsl.TFloat] with org.squeryl.dsl.PrimitiveJdbcMapper[Float]{val sample: Float; val defaultColumnLength: Int}}; val floatifyer: org.squeryl.dsl.FloatTypedExpressionFactory[Option[Float],org.squeryl.dsl.TOptionFloat] with org.squeryl.dsl.DeOptionizer[Float,Float,org.squeryl.dsl.TFloat,Option[Float],org.squeryl.dsl.TOptionFloat]{val deOptionizer: org.squeryl.dsl.FloatTypedExpressionFactory[Float,org.squeryl.dsl.TFloat] with org.squeryl.dsl.PrimitiveJdbcMapper[Float]{val sample: Float; val defaultColumnLength: Int}}} = PrimitiveTypeMode.this.PrimitiveTypeSupport.optionIntTEF;
    implicit <stable> <accessor> def optionIntTEF: org.squeryl.dsl.IntegralTypedExpressionFactory[Option[Int],org.squeryl.dsl.TOptionInt,Option[Float],org.squeryl.dsl.TOptionFloat] with org.squeryl.dsl.DeOptionizer[Int,Int,org.squeryl.dsl.TInt,Option[Int],org.squeryl.dsl.TOptionInt]{val deOptionizer: org.squeryl.dsl.IntegralTypedExpressionFactory[Int,org.squeryl.dsl.TInt,Float,org.squeryl.dsl.TFloat] with org.squeryl.dsl.PrimitiveJdbcMapper[Int]{val sample: Int; val defaultColumnLength: Int; val floatifyer: org.squeryl.dsl.FloatTypedExpressionFactory[Float,org.squeryl.dsl.TFloat] with org.squeryl.dsl.PrimitiveJdbcMapper[Float]{val sample: Float; val defaultColumnLength: Int}}; val floatifyer: org.squeryl.dsl.FloatTypedExpressionFactory[Option[Float],org.squeryl.dsl.TOptionFloat] with org.squeryl.dsl.DeOptionizer[Float,Float,org.squeryl.dsl.TFloat,Option[Float],org.squeryl.dsl.TOptionFloat]{val deOptionizer: org.squeryl.dsl.FloatTypedExpressionFactory[Float,org.squeryl.dsl.TFloat] with org.squeryl.dsl.PrimitiveJdbcMapper[Float]{val sample: Float; val defaultColumnLength: Int}}} = PrimitiveTypeMode.this.optionIntTEF;
    private[this] val longTEF: org.squeryl.dsl.IntegralTypedExpressionFactory[Long,org.squeryl.dsl.TLong,Double,org.squeryl.dsl.TDouble] with org.squeryl.dsl.PrimitiveJdbcMapper[Long]{val sample: Long; val defaultColumnLength: Int; val floatifyer: org.squeryl.dsl.FloatTypedExpressionFactory[Double,org.squeryl.dsl.TDouble] with org.squeryl.dsl.PrimitiveJdbcMapper[Double]{val sample: Double; val defaultColumnLength: Int}} = PrimitiveTypeMode.this.PrimitiveTypeSupport.longTEF;
    implicit <stable> <accessor> def longTEF: org.squeryl.dsl.IntegralTypedExpressionFactory[Long,org.squeryl.dsl.TLong,Double,org.squeryl.dsl.TDouble] with org.squeryl.dsl.PrimitiveJdbcMapper[Long]{val sample: Long; val defaultColumnLength: Int; val floatifyer: org.squeryl.dsl.FloatTypedExpressionFactory[Double,org.squeryl.dsl.TDouble] with org.squeryl.dsl.PrimitiveJdbcMapper[Double]{val sample: Double; val defaultColumnLength: Int}} = PrimitiveTypeMode.this.longTEF;
    private[this] val optionLongTEF: org.squeryl.dsl.IntegralTypedExpressionFactory[Option[Long],org.squeryl.dsl.TOptionLong,Option[Double],org.squeryl.dsl.TOptionDouble] with org.squeryl.dsl.DeOptionizer[Long,Long,org.squeryl.dsl.TLong,Option[Long],org.squeryl.dsl.TOptionLong]{val deOptionizer: org.squeryl.dsl.IntegralTypedExpressionFactory[Long,org.squeryl.dsl.TLong,Double,org.squeryl.dsl.TDouble] with org.squeryl.dsl.PrimitiveJdbcMapper[Long]{val sample: Long; val defaultColumnLength: Int; val floatifyer: org.squeryl.dsl.FloatTypedExpressionFactory[Double,org.squeryl.dsl.TDouble] with org.squeryl.dsl.PrimitiveJdbcMapper[Double]{val sample: Double; val defaultColumnLength: Int}}; val floatifyer: org.squeryl.dsl.FloatTypedExpressionFactory[Option[Double],org.squeryl.dsl.TOptionDouble] with org.squeryl.dsl.DeOptionizer[Double,Double,org.squeryl.dsl.TDouble,Option[Double],org.squeryl.dsl.TOptionDouble]{val deOptionizer: org.squeryl.dsl.FloatTypedExpressionFactory[Double,org.squeryl.dsl.TDouble] with org.squeryl.dsl.PrimitiveJdbcMapper[Double]{val sample: Double; val defaultColumnLength: Int}}} = PrimitiveTypeMode.this.PrimitiveTypeSupport.optionLongTEF;
    implicit <stable> <accessor> def optionLongTEF: org.squeryl.dsl.IntegralTypedExpressionFactory[Option[Long],org.squeryl.dsl.TOptionLong,Option[Double],org.squeryl.dsl.TOptionDouble] with org.squeryl.dsl.DeOptionizer[Long,Long,org.squeryl.dsl.TLong,Option[Long],org.squeryl.dsl.TOptionLong]{val deOptionizer: org.squeryl.dsl.IntegralTypedExpressionFactory[Long,org.squeryl.dsl.TLong,Double,org.squeryl.dsl.TDouble] with org.squeryl.dsl.PrimitiveJdbcMapper[Long]{val sample: Long; val defaultColumnLength: Int; val floatifyer: org.squeryl.dsl.FloatTypedExpressionFactory[Double,org.squeryl.dsl.TDouble] with org.squeryl.dsl.PrimitiveJdbcMapper[Double]{val sample: Double; val defaultColumnLength: Int}}; val floatifyer: org.squeryl.dsl.FloatTypedExpressionFactory[Option[Double],org.squeryl.dsl.TOptionDouble] with org.squeryl.dsl.DeOptionizer[Double,Double,org.squeryl.dsl.TDouble,Option[Double],org.squeryl.dsl.TOptionDouble]{val deOptionizer: org.squeryl.dsl.FloatTypedExpressionFactory[Double,org.squeryl.dsl.TDouble] with org.squeryl.dsl.PrimitiveJdbcMapper[Double]{val sample: Double; val defaultColumnLength: Int}}} = PrimitiveTypeMode.this.optionLongTEF;
    private[this] val floatTEF: org.squeryl.dsl.FloatTypedExpressionFactory[Float,org.squeryl.dsl.TFloat] with org.squeryl.dsl.PrimitiveJdbcMapper[Float]{val sample: Float; val defaultColumnLength: Int} = PrimitiveTypeMode.this.PrimitiveTypeSupport.floatTEF;
    implicit <stable> <accessor> def floatTEF: org.squeryl.dsl.FloatTypedExpressionFactory[Float,org.squeryl.dsl.TFloat] with org.squeryl.dsl.PrimitiveJdbcMapper[Float]{val sample: Float; val defaultColumnLength: Int} = PrimitiveTypeMode.this.floatTEF;
    private[this] val optionFloatTEF: org.squeryl.dsl.FloatTypedExpressionFactory[Option[Float],org.squeryl.dsl.TOptionFloat] with org.squeryl.dsl.DeOptionizer[Float,Float,org.squeryl.dsl.TFloat,Option[Float],org.squeryl.dsl.TOptionFloat]{val deOptionizer: org.squeryl.dsl.FloatTypedExpressionFactory[Float,org.squeryl.dsl.TFloat] with org.squeryl.dsl.PrimitiveJdbcMapper[Float]{val sample: Float; val defaultColumnLength: Int}} = PrimitiveTypeMode.this.PrimitiveTypeSupport.optionFloatTEF;
    implicit <stable> <accessor> def optionFloatTEF: org.squeryl.dsl.FloatTypedExpressionFactory[Option[Float],org.squeryl.dsl.TOptionFloat] with org.squeryl.dsl.DeOptionizer[Float,Float,org.squeryl.dsl.TFloat,Option[Float],org.squeryl.dsl.TOptionFloat]{val deOptionizer: org.squeryl.dsl.FloatTypedExpressionFactory[Float,org.squeryl.dsl.TFloat] with org.squeryl.dsl.PrimitiveJdbcMapper[Float]{val sample: Float; val defaultColumnLength: Int}} = PrimitiveTypeMode.this.optionFloatTEF;
    private[this] val doubleTEF: org.squeryl.dsl.FloatTypedExpressionFactory[Double,org.squeryl.dsl.TDouble] with org.squeryl.dsl.PrimitiveJdbcMapper[Double]{val sample: Double; val defaultColumnLength: Int} = PrimitiveTypeMode.this.PrimitiveTypeSupport.doubleTEF;
    implicit <stable> <accessor> def doubleTEF: org.squeryl.dsl.FloatTypedExpressionFactory[Double,org.squeryl.dsl.TDouble] with org.squeryl.dsl.PrimitiveJdbcMapper[Double]{val sample: Double; val defaultColumnLength: Int} = PrimitiveTypeMode.this.doubleTEF;
    private[this] val optionDoubleTEF: org.squeryl.dsl.FloatTypedExpressionFactory[Option[Double],org.squeryl.dsl.TOptionDouble] with org.squeryl.dsl.DeOptionizer[Double,Double,org.squeryl.dsl.TDouble,Option[Double],org.squeryl.dsl.TOptionDouble]{val deOptionizer: org.squeryl.dsl.FloatTypedExpressionFactory[Double,org.squeryl.dsl.TDouble] with org.squeryl.dsl.PrimitiveJdbcMapper[Double]{val sample: Double; val defaultColumnLength: Int}} = PrimitiveTypeMode.this.PrimitiveTypeSupport.optionDoubleTEF;
    implicit <stable> <accessor> def optionDoubleTEF: org.squeryl.dsl.FloatTypedExpressionFactory[Option[Double],org.squeryl.dsl.TOptionDouble] with org.squeryl.dsl.DeOptionizer[Double,Double,org.squeryl.dsl.TDouble,Option[Double],org.squeryl.dsl.TOptionDouble]{val deOptionizer: org.squeryl.dsl.FloatTypedExpressionFactory[Double,org.squeryl.dsl.TDouble] with org.squeryl.dsl.PrimitiveJdbcMapper[Double]{val sample: Double; val defaultColumnLength: Int}} = PrimitiveTypeMode.this.optionDoubleTEF;
    private[this] val bigDecimalTEF: org.squeryl.dsl.FloatTypedExpressionFactory[BigDecimal,org.squeryl.dsl.TBigDecimal] with org.squeryl.dsl.PrimitiveJdbcMapper[BigDecimal]{val sample: scala.math.BigDecimal; val defaultColumnLength: Int} = PrimitiveTypeMode.this.PrimitiveTypeSupport.bigDecimalTEF;
    implicit <stable> <accessor> def bigDecimalTEF: org.squeryl.dsl.FloatTypedExpressionFactory[BigDecimal,org.squeryl.dsl.TBigDecimal] with org.squeryl.dsl.PrimitiveJdbcMapper[BigDecimal]{val sample: scala.math.BigDecimal; val defaultColumnLength: Int} = PrimitiveTypeMode.this.bigDecimalTEF;
    private[this] val optionBigDecimalTEF: org.squeryl.dsl.FloatTypedExpressionFactory[Option[BigDecimal],org.squeryl.dsl.TOptionBigDecimal] with org.squeryl.dsl.DeOptionizer[BigDecimal,BigDecimal,org.squeryl.dsl.TBigDecimal,Option[BigDecimal],org.squeryl.dsl.TOptionBigDecimal]{val deOptionizer: org.squeryl.dsl.FloatTypedExpressionFactory[BigDecimal,org.squeryl.dsl.TBigDecimal] with org.squeryl.dsl.PrimitiveJdbcMapper[BigDecimal]{val sample: scala.math.BigDecimal; val defaultColumnLength: Int}} = PrimitiveTypeMode.this.PrimitiveTypeSupport.optionBigDecimalTEF;
    implicit <stable> <accessor> def optionBigDecimalTEF: org.squeryl.dsl.FloatTypedExpressionFactory[Option[BigDecimal],org.squeryl.dsl.TOptionBigDecimal] with org.squeryl.dsl.DeOptionizer[BigDecimal,BigDecimal,org.squeryl.dsl.TBigDecimal,Option[BigDecimal],org.squeryl.dsl.TOptionBigDecimal]{val deOptionizer: org.squeryl.dsl.FloatTypedExpressionFactory[BigDecimal,org.squeryl.dsl.TBigDecimal] with org.squeryl.dsl.PrimitiveJdbcMapper[BigDecimal]{val sample: scala.math.BigDecimal; val defaultColumnLength: Int}} = PrimitiveTypeMode.this.optionBigDecimalTEF;
    implicit def stringToTE(s: String): org.squeryl.dsl.TypedExpression[String,org.squeryl.dsl.TString] = PrimitiveTypeMode.this.stringTEF.create(s);
    implicit def optionStringToTE(s: Option[String]): org.squeryl.dsl.TypedExpression[Option[String],org.squeryl.dsl.TOptionString] = PrimitiveTypeMode.this.optionStringTEF.create(s);
    implicit def dateToTE(s: java.util.Date): org.squeryl.dsl.TypedExpression[java.util.Date,org.squeryl.dsl.TDate] = PrimitiveTypeMode.this.dateTEF.create(s);
    implicit def optionDateToTE(s: Option[java.util.Date]): org.squeryl.dsl.TypedExpression[Option[java.util.Date],org.squeryl.dsl.TOptionDate] = PrimitiveTypeMode.this.optionDateTEF.create(s);
    implicit def timestampToTE(s: java.sql.Timestamp): org.squeryl.dsl.TypedExpression[java.sql.Timestamp,org.squeryl.dsl.TTimestamp] = PrimitiveTypeMode.this.timestampTEF.create(s);
    implicit def optionTimestampToTE(s: Option[java.sql.Timestamp]): org.squeryl.dsl.TypedExpression[Option[java.sql.Timestamp],org.squeryl.dsl.TOptionTimestamp] = PrimitiveTypeMode.this.optionTimestampTEF.create(s);
    implicit def booleanToTE(s: Boolean): org.squeryl.dsl.TypedExpression[Boolean,org.squeryl.dsl.TBoolean] = PrimitiveTypeMode.this.PrimitiveTypeSupport.booleanTEF.create(s);
    implicit def optionBooleanToTE(s: Option[Boolean]): org.squeryl.dsl.TypedExpression[Option[Boolean],org.squeryl.dsl.TOptionBoolean] = PrimitiveTypeMode.this.PrimitiveTypeSupport.optionBooleanTEF.create(s);
    implicit def uuidToTE(s: java.util.UUID): org.squeryl.dsl.TypedExpression[java.util.UUID,org.squeryl.dsl.TUUID] = PrimitiveTypeMode.this.PrimitiveTypeSupport.uuidTEF.create(s);
    implicit def optionUUIDToTE(s: Option[java.util.UUID]): org.squeryl.dsl.TypedExpression[Option[java.util.UUID],org.squeryl.dsl.TOptionUUID] = PrimitiveTypeMode.this.PrimitiveTypeSupport.optionUUIDTEF.create(s);
    implicit def binaryToTE(s: Array[Byte]): org.squeryl.dsl.TypedExpression[Array[Byte],org.squeryl.dsl.TByteArray] = PrimitiveTypeMode.this.PrimitiveTypeSupport.binaryTEF.create(s);
    implicit def optionByteArrayToTE(s: Option[Array[Byte]]): org.squeryl.dsl.TypedExpression[Option[Array[Byte]],org.squeryl.dsl.TOptionByteArray] = PrimitiveTypeMode.this.PrimitiveTypeSupport.optionByteArrayTEF.create(s);
    implicit def enumValueToTE[A >: Nothing <: Enumeration#Value](e: A): org.squeryl.dsl.TypedExpression[Enumeration#Value,org.squeryl.dsl.TEnumValue[Enumeration#Value]] = PrimitiveTypeMode.this.PrimitiveTypeSupport.enumValueTEF[Enumeration#Value](e).create(e);
    implicit def optionEnumcValueToTE[A >: Nothing <: Enumeration#Value](e: Option[A]): org.squeryl.dsl.TypedExpression[Option[Enumeration#Value],org.squeryl.dsl.TOptionEnumValue[Enumeration#Value]] = PrimitiveTypeMode.this.PrimitiveTypeSupport.optionEnumValueTEF[Enumeration#Value](e).create(e);
    implicit def byteToTE(f: Byte): org.squeryl.dsl.TypedExpression[Byte,org.squeryl.dsl.TByte] = PrimitiveTypeMode.this.byteTEF.create(f);
    implicit def optionByteToTE(f: Option[Byte]): org.squeryl.dsl.TypedExpression[Option[Byte],org.squeryl.dsl.TOptionByte] = PrimitiveTypeMode.this.optionByteTEF.create(f);
    implicit def intToTE(f: Int): org.squeryl.dsl.TypedExpression[Int,org.squeryl.dsl.TInt] = PrimitiveTypeMode.this.intTEF.create(f);
    implicit def optionIntToTE(f: Option[Int]): org.squeryl.dsl.TypedExpression[Option[Int],org.squeryl.dsl.TOptionInt] = PrimitiveTypeMode.this.optionIntTEF.create(f);
    implicit def longToTE(f: Long): org.squeryl.dsl.TypedExpression[Long,org.squeryl.dsl.TLong] = PrimitiveTypeMode.this.longTEF.create(f);
    implicit def optionLongToTE(f: Option[Long]): org.squeryl.dsl.TypedExpression[Option[Long],org.squeryl.dsl.TOptionLong] = PrimitiveTypeMode.this.optionLongTEF.create(f);
    implicit def floatToTE(f: Float): org.squeryl.dsl.TypedExpression[Float,org.squeryl.dsl.TFloat] = PrimitiveTypeMode.this.floatTEF.create(f);
    implicit def optionFloatToTE(f: Option[Float]): org.squeryl.dsl.TypedExpression[Option[Float],org.squeryl.dsl.TOptionFloat] = PrimitiveTypeMode.this.optionFloatTEF.create(f);
    implicit def doubleToTE(f: Double): org.squeryl.dsl.TypedExpression[Double,org.squeryl.dsl.TDouble] = PrimitiveTypeMode.this.doubleTEF.create(f);
    implicit def optionDoubleToTE(f: Option[Double]): org.squeryl.dsl.TypedExpression[Option[Double],org.squeryl.dsl.TOptionDouble] = PrimitiveTypeMode.this.optionDoubleTEF.create(f);
    implicit def bigDecimalToTE(f: BigDecimal): org.squeryl.dsl.TypedExpression[BigDecimal,org.squeryl.dsl.TBigDecimal] = PrimitiveTypeMode.this.bigDecimalTEF.create(f);
    implicit def optionBigDecimalToTE(f: Option[BigDecimal]): org.squeryl.dsl.TypedExpression[Option[BigDecimal],org.squeryl.dsl.TOptionBigDecimal] = PrimitiveTypeMode.this.optionBigDecimalTEF.create(f);
    implicit def doubleArrayToTE(f: Array[Double]): org.squeryl.dsl.TypedExpression[Array[Double],org.squeryl.dsl.TDoubleArray] = PrimitiveTypeMode.this.doubleArrayTEF.create(f);
    implicit def intArrayToTE(f: Array[Int]): org.squeryl.dsl.TypedExpression[Array[Int],org.squeryl.dsl.TIntArray] = PrimitiveTypeMode.this.intArrayTEF.create(f);
    implicit def longArrayToTE(f: Array[Long]): org.squeryl.dsl.TypedExpression[Array[Long],org.squeryl.dsl.TLongArray] = PrimitiveTypeMode.this.longArrayTEF.create(f);
    implicit def stringArrayToTE(f: Array[String]): org.squeryl.dsl.TypedExpression[Array[String],org.squeryl.dsl.TStringArray] = PrimitiveTypeMode.this.stringArrayTEF.create(f)
  }
}